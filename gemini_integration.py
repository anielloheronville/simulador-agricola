# -*- coding: utf-8 -*-
"""gemini_integration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12feUeCKoIKD3g-GLRJYGQ6q4GYryF8Jo
"""

# -*- coding: utf-8 -*-
"""gemini_integration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zns9hTc7zvn60nESL49RbQwVPFX-fEeT
"""

import os
import google.generativeai as genai
from dotenv import load_dotenv

def configurar_gemini():
    """Configura e retorna o modelo generativo do Gemini."""
    try:
        load_dotenv()
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            raise ValueError("Chave da API do Google não encontrada no arquivo .env.")
        genai.configure(api_key=api_key)
        return genai.GenerativeModel('gemini-1.5-flash')
    except Exception as e:
        print(f"Erro ao configurar a API do Gemini: {e}")
        return None

def gerar_relatorio_executivo(df_summary, cultura, parametros_produtividade):
    """Gera um resumo executivo usando o Gemini com base nos resultados da simulação."""
    model = configurar_gemini()
    if not model:
        return "*Não foi possível gerar o relatório. Verifique a configuração da API.*"

    melhor_janela = df_summary.loc[df_summary['margem_media'].idxmax()]
    dados_formatados = (
        f"- Cultura Analisada: {cultura}\n"
        f"- Melhor Janela de Plantio Identificada: {melhor_janela['data_plantio_str']}\n"
        f"- Produtividade Potencial (Yp) Configurada: {parametros_produtividade['yp']} sc/ha\n"
        f"- Margem Bruta Média Esperada: R$ {melhor_janela['margem_media']:.2f} / ha\n"
        f"- Probabilidade de Prejuízo Associada: {melhor_janela['prob_prejuizo']:.1f}%\n"
        f"- Média de Dias de Estresse Hídrico: {melhor_janela['estresse_medio']:.1f} dias"
    )

    # O prompt foi atualizado para refletir a metodologia de Monte Carlo
    prompt = (
        f"Você é um consultor agronômico sênior, especialista em gestão de risco para a região de "
        f"Lucas do Rio Verde, MT. Analise os seguintes resultados consolidados de uma simulação agrícola "
        f"baseada em simulações climáticas (Método de Monte Carlo) e escreva um resumo executivo para um "
        f"produtor rural. O resumo deve ser objetivo, em português, e focado em recomendações práticas. "
        f"Destaque o trade-off entre risco e retorno da melhor janela encontrada.\n\n"
        f"**Dados Consolidados da Melhor Janela de Plantio:**\n{dados_formatados}\n\n"
        f"**Relatório Executivo:**"
    )

    response = model.generate_content(prompt)
    return response.text

def responder_pergunta_chatbot(pergunta, df_resultados_csv):
    """Responde a uma pergunta do usuário com base nos dados da simulação."""
    model = configurar_gemini()
    if not model:
        return "*Não foi possível conectar à IA. Verifique a configuração da API.*"

    prompt = (
        f"Você é um assistente de análise de dados agronômicos. Sua tarefa é responder à pergunta do "
        f"usuário baseando-se estritamente nos dados de simulação fornecidos em formato CSV. "
        f"Seja conciso e direto.\n\n"
        f"**Dados da Simulação (CSV):**\n{df_resultados_csv}\n\n"
        f"**Pergunta do Usuário:**\n'{pergunta}'\n\n"
        f"**Sua Resposta:**"
    )
    response = model.generate_content(prompt)
    return response.text