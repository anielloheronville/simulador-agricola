# -*- coding: utf-8 -*-
"""sensitivity_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ptR6UrGsiEWrbYVr4egnaJbggroORZW6
"""

# Arquivo: pages/sensitivity_analysis.py
import dash
from dash import dcc, html, callback, Input, Output, State
import dash_bootstrap_components as dbc
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import traceback

# Registar esta p√°gina na aplica√ß√£o Dash
dash.register_page(__name__, path='/analise-de-sensibilidade', name="An√°lise de Sensibilidade")

# =============================================================================
# DEFINI√á√ÉO DO LAYOUT
# =============================================================================

initial_layout = dbc.Alert(
    [
        html.H4("Dados N√£o Encontrados", className="alert-heading"),
        html.P("Por favor, execute primeiro uma an√°lise na p√°gina do 'Dashboard Principal' para carregar um cen√°rio base para a an√°lise de sensibilidade."),
        html.Hr(),
        dbc.Button("Ir para o Dashboard Principal", href="/", color="primary"),
    ],
    color="warning",
    id="no-data-alert-sensitivity",
    is_open=True
)

analysis_layout = html.Div(
    id="sensitivity-analysis-content",
    style={'display': 'none'},
    children=[
        dbc.Row([
            dbc.Col(width=3, children=[
                dbc.Card([
                    dbc.CardHeader("Configura√ß√£o da An√°lise"),
                    dbc.CardBody([
                        dbc.Label("Selecione o par√¢metro para analisar:", html_for="param-dropdown-sensitivity"),
                        dcc.Dropdown(
                            id='param-dropdown-sensitivity',
                            options=[
                                {'label': 'Pre√ßo de Venda (R$/saca)', 'value': 'preco_venda'},
                                {'label': 'Custo de Produ√ß√£o (R$/ha)', 'value': 'custo_producao'},
                                {'label': 'Produtividade Potencial (sc/ha)', 'value': 'yp'}
                            ],
                            value='preco_venda',
                            clearable=False
                        ),
                        html.Br(),
                        dbc.Label("Selecione a faixa de varia√ß√£o (%):", html_for="variation-slider-sensitivity"),
                        dcc.RangeSlider(
                            id='variation-slider-sensitivity',
                            min=-50, max=50, step=5, value=[-20, 20],
                            marks={i: f'{i}%' for i in range(-50, 51, 10)},
                            tooltip={"placement": "bottom", "always_visible": True}
                        ),
                        html.Br(),
                        dbc.Button("‚ñ∂Ô∏è Executar An√°lise de Sensibilidade", id='run-sensitivity-button', color="success", className="w-100 mt-4")
                    ])
                ])
            ]),
            dbc.Col(width=9, children=[
                dcc.Loading(
                    id="loading-sensitivity",
                    type="default",
                    children=[
                        dbc.Alert(id='error-alert-sensitivity', color="danger", is_open=False, style={'whiteSpace': 'pre-wrap'}),
                        html.Div(id='results-output-sensitivity')
                    ]
                )
            ])
        ])
    ]
)

layout = html.Div([
    html.H2("üß™ An√°lise de Sensibilidade Estrat√©gica"),
    html.P("Esta ferramenta permite avaliar o impacto de varia√ß√µes em par√¢metros chave de mercado e produtividade nos seus resultados financeiros. Use os controlos para simular diferentes cen√°rios e entender qual vari√°vel tem o maior impacto na sua opera√ß√£o."),
    html.Hr(),
    initial_layout,
    analysis_layout
])

# =============================================================================
# CALLBACKS
# =============================================================================

@callback(
    [Output('sensitivity-analysis-content', 'style'),
     Output('no-data-alert-sensitivity', 'is_open')],
    Input('results-store', 'data')
)
def toggle_layout_visibility(results_data):
    """
    Mostra os controlos de an√°lise apenas se existirem dados da simula√ß√£o principal.
    """
    if results_data:
        return {'display': 'block'}, False
    return {'display': 'none'}, True


@callback(
    Output('results-output-sensitivity', 'children'),
    Output('error-alert-sensitivity', 'is_open'),
    Output('error-alert-sensitivity', 'children'),
    Input('run-sensitivity-button', 'n_clicks'),
    [State('results-store', 'data'),
     State('params-store-sensitivity', 'data'),
     State('param-dropdown-sensitivity', 'value'),
     State('variation-slider-sensitivity', 'value')]
)
def run_sensitivity_analysis(n_clicks, results_data, params_data, param_to_analyze, variation_range):
    """
    Executa a an√°lise de sensibilidade com captura total de erros.
    """
    if n_clicks is None:
        return html.Div(), False, ""

    try:
        if not results_data or not params_data:
            raise ValueError("Dados da simula√ß√£o principal n√£o encontrados. Execute a an√°lise no Dashboard Principal primeiro.")

        df_base = pd.read_json(results_data, orient='split')

        if 'params_base' not in params_data:
            raise KeyError("Estrutura de par√¢metros inv√°lida. A chave 'params_base' n√£o foi encontrada. Reexecute a an√°lise principal.")

        params_base = params_data['params_base']

        required_keys = ['ky', 'yp', 'preco_venda', 'custo_producao', 'Dura√ß√£o do Ciclo (dias)']
        missing_keys = [key for key in required_keys if key not in params_base]
        if missing_keys:
            raise KeyError(f"As seguintes chaves est√£o em falta nos par√¢metros armazenados: {', '.join(missing_keys)}. Reexecute a an√°lise principal.")

        duracao_ciclo = params_base['Dura√ß√£o do Ciclo (dias)']

        lista_resultados_sensibilidade = []
        passos_variacao = np.arange(variation_range[0], variation_range[1] + 5, 5)

        for pct_variacao in passos_variacao:
            params_modificados = params_base.copy()
            fator = 1 + (pct_variacao / 100.0)
            params_modificados[param_to_analyze] *= fator

            estresse_reprodutivo = df_base['estresse_florescimento'] + df_base['estresse_ench_graos']
            fator_reducao = params_modificados['ky'] * (estresse_reprodutivo / duracao_ciclo)
            produtividade_temp = params_modificados['yp'] * (1 - np.minimum(fator_reducao, 1.0))
            margem_temp = (produtividade_temp * params_modificados['preco_venda']) - params_modificados['custo_producao']

            lista_resultados_sensibilidade.append({
                "variacao_perc": pct_variacao,
                "margem_media_ha": margem_temp.mean(),
                "prob_prejuizo_perc": (margem_temp < 0).mean() * 100
            })

        df_sensibilidade = pd.DataFrame(lista_resultados_sensibilidade)

        fig_sensibilidade = go.Figure()
        fig_sensibilidade.add_trace(go.Scatter(
            x=df_sensibilidade['variacao_perc'], y=df_sensibilidade['margem_media_ha'],
            name='Margem Bruta M√©dia (R$/ha)', mode='lines+markers',
            line=dict(color='cornflowerblue', width=3)
        ))
        fig_sensibilidade.add_trace(go.Scatter(
            x=df_sensibilidade['variacao_perc'], y=df_sensibilidade['prob_prejuizo_perc'],
            name='Probabilidade de Preju√≠zo (%)', mode='lines+markers', yaxis='y2',
            line=dict(color='tomato', width=3, dash='dash')
        ))

        # Em vez de ler do dash.callback_context, criamos um mapa simples aqui.
        options_map = {
            'preco_venda': 'Pre√ßo de Venda (R$/saca)',
            'custo_producao': 'Custo de Produ√ß√£o (R$/ha)',
            'yp': 'Produtividade Potencial (sc/ha)'
        }
        param_label = options_map.get(param_to_analyze, param_to_analyze)

        fig_sensibilidade.update_layout(
            title_text=f"Sensibilidade da Opera√ß√£o √† Varia√ß√£o em '{param_label}'",
            xaxis_title=f"Varia√ß√£o no Par√¢metro (%)",
            yaxis=dict(title=dict(text="Margem Bruta M√©dia (R$/ha)", font=dict(color="cornflowerblue")), tickfont=dict(color="cornflowerblue")),
            yaxis2=dict(title=dict(text="Probabilidade de Preju√≠zo (%)", font=dict(color="tomato")), overlaying='y', side='right', tickfont=dict(color="tomato")),
            legend=dict(x=0.01, y=0.99, bordercolor="Gainsboro", borderwidth=1),
            template="plotly_white"
        )

        df_sensibilidade_display = df_sensibilidade.rename(columns={
            "variacao_perc": "Varia√ß√£o (%)",
            "margem_media_ha": "Margem M√©dia (R$/ha)",
            "prob_prejuizo_perc": "Prob. Preju√≠zo (%)"
        })
        results_table = dbc.Table.from_dataframe(
            df_sensibilidade_display, striped=True, bordered=True, hover=True, responsive=True, className="mt-4"
        )

        output_content = html.Div([
            dcc.Graph(figure=fig_sensibilidade),
            html.Hr(),
            html.H4("Dados da An√°lise"),
            results_table
        ])

        return output_content, False, ""

    except Exception as e:
        error_details = traceback.format_exc()
        error_message = f"Ocorreu um erro inesperado na an√°lise de sensibilidade:\n\n{e}\n\nDetalhes t√©cnicos:\n{error_details}"
        return html.Div(), True, error_message