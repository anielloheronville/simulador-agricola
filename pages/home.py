# -*- coding: utf-8 -*-
"""home

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VMvSIHAPbldkvpgkQ2X_YJcF8U4224y6
"""

# Arquivo: pages/home.py
import dash
from dash import dcc, html, callback, Input, Output, State, no_update
import dash_bootstrap_components as dbc
import pandas as pd
import numpy as np
from datetime import date
import plotly.express as px
import plotly.graph_objects as go

# Importa os motores de simula√ß√£o
import simulation_engine

# Registra esta p√°gina como a p√°gina inicial
dash.register_page(__name__, path='/', name="Dashboard Principal")

# =============================================================================
# DEFINI√á√ÉO DO LAYOUT DA P√ÅGINA
# =============================================================================

controls_sidebar = dbc.Card([
    dbc.CardHeader("Par√¢metros da An√°lise"),
    dbc.CardBody([
        html.H5("üóìÔ∏è Janelas de Plantio"),
        dbc.Label("Intervalo de An√°lise:"),
        dcc.DatePickerRange(id='date-picker-range', min_date_allowed=date(2024, 1, 1), max_date_allowed=date(2028, 12, 31), initial_visible_month=date(2025, 10, 1), start_date=date(2025, 10, 1), end_date=date(2026, 1, 15), className="mb-2"),
        dbc.Label("Intervalo entre datas (dias):", className="mt-3"),
        # --- ALTERA√á√ÉO 1: Tooltip sempre vis√≠vel ---
        dcc.Slider(
            id='intervalo-dias-slider', min=7, max=30, step=1, value=15,
            marks={7: '7', 15: '15', 30: '30'},
            tooltip={"placement": "bottom", "always_visible": True}
        ),
        html.Hr(),
        html.H5("‚öôÔ∏è Par√¢metros da Simula√ß√£o"),
        dbc.Label("Cultura:"),
        dcc.Dropdown(id='cultura-dropdown', options=['Soja', 'Milho'], value='Soja', clearable=False, className="mb-2"),
        dbc.Label("Dura√ß√£o do Ciclo (dias):"),
        # --- ALTERA√á√ÉO 2: Tooltip sempre vis√≠vel ---
        dcc.Slider(
            id='duracao-ciclo-slider', min=90, max=180, step=5, value=130,
            marks={90: '90', 135: '135', 180: '180'},
            tooltip={"placement": "bottom", "always_visible": True}
        ),
        dbc.Label("N√∫mero de Simula√ß√µes (Monte Carlo):", className="mt-3"),
        dbc.Input(id='num-simulacoes-input', type='number', value=200, min=10, max=1000, step=10),
        html.Hr(),
        dbc.Accordion([
            dbc.AccordionItem(
                [
                    dbc.Row([
                        dbc.Col([
                            html.H6("Soja"),
                            dbc.Label("Prod. Potencial (sc/ha):"), dbc.Input(id='yp-soja-input', type='number', value=85.0),
                            dbc.Label("Custo (R$/ha):", className="mt-2"), dbc.Input(id='custo-soja-input', type='number', value=4500.0),
                            dbc.Label("Pre√ßo (R$/saca):", className="mt-2"), dbc.Input(id='preco-soja-input', type='number', value=120.0),
                        ]),
                        dbc.Col([
                            html.H6("Milho"),
                            dbc.Label("Prod. Potencial (sc/ha):"), dbc.Input(id='yp-milho-input', type='number', value=120.0),
                            dbc.Label("Custo (R$/ha):", className="mt-2"), dbc.Input(id='custo-milho-input', type='number', value=3800.0),
                            dbc.Label("Pre√ßo (R$/saca):", className="mt-2"), dbc.Input(id='preco-milho-input', type='number', value=55.0),
                        ])
                    ])
                ], title="üí∞ Par√¢metros de Produtividade e Econ√¥micos"
            ),
            dbc.AccordionItem(
                [
                    dbc.Label("Temperatura Base (¬∞C):"), dbc.Input(id='t-base-input', type='number', value=10.0),
                    html.Hr(),
                    html.H6("GDU - Fases Fenol√≥gicas"),
                    dbc.Row([
                        dbc.Col([
                            html.P("Soja", className="fw-bold"), dbc.Label("In√≠cio Reprodutivo:"), dbc.Input(id='gdu-inicio-soja-input', type='number', value=800.0),
                            dbc.Label("Enchimento Gr√£os:", className="mt-2"), dbc.Input(id='gdu-pico-soja-input', type='number', value=1200.0),
                        ]),
                        dbc.Col([
                            html.P("Milho", className="fw-bold"), dbc.Label("In√≠cio Reprodutivo:"), dbc.Input(id='gdu-inicio-milho-input', type='number', value=700.0),
                            dbc.Label("Enchimento Gr√£os:", className="mt-2"), dbc.Input(id='gdu-pico-milho-input', type='number', value=1100.0),
                        ])
                    ]),
                    html.Hr(),
                    html.H6("Fator de Resposta ao Estresse (ky)"),
                     dbc.Row([
                        dbc.Col([dbc.Label("Soja:"), dbc.Input(id='ky-soja-input', type='number', value=1.10)]),
                        dbc.Col([dbc.Label("Milho:"), dbc.Input(id='ky-milho-input', type='number', value=1.20)])
                    ]),
                ], title="üî¨ Par√¢metros Avan√ßados"
            )
        ], start_collapsed=True, always_open=True),
        dbc.Button("‚ñ∂Ô∏è Executar An√°lise Probabil√≠stica", id='run-analysis-button', color="primary", className="mt-4 w-100")
    ])
])

results_layout = dcc.Loading(
    id="loading-spinner", type="default",
    children=[
        dbc.Alert(id='error-alert', color="danger", is_open=False),
        html.Div(id='results-output-div', children=[
            dbc.Alert("Configure os par√¢metros √† esquerda e clique em 'Executar An√°lise' para come√ßar.", color="info")
        ])
    ]
)

layout = dbc.Row([dbc.Col(controls_sidebar, width=3), dbc.Col(results_layout, width=9)])

# =============================================================================
# CALLBACKS DE INTERATIVIDADE
# =============================================================================

@callback(
    [Output('yp-soja-input', 'disabled'), Output('custo-soja-input', 'disabled'), Output('preco-soja-input', 'disabled'), Output('gdu-inicio-soja-input', 'disabled'), Output('gdu-pico-soja-input', 'disabled'), Output('ky-soja-input', 'disabled'),
     Output('yp-milho-input', 'disabled'), Output('custo-milho-input', 'disabled'), Output('preco-milho-input', 'disabled'), Output('gdu-inicio-milho-input', 'disabled'), Output('gdu-pico-milho-input', 'disabled'), Output('ky-milho-input', 'disabled')],
    Input('cultura-dropdown', 'value')
)
def toggle_culture_params(cultura_selecionada):
    soja_disabled = (cultura_selecionada == 'Milho')
    milho_disabled = (cultura_selecionada == 'Soja')
    return [soja_disabled]*6 + [milho_disabled]*6

@callback(
    Output('results-output-div', 'children'),
    Output('error-alert', 'is_open'),
    Output('error-alert', 'children'),
    Output('results-store', 'data'),
    Output('params-store-sensitivity', 'data'),
    Input('run-analysis-button', 'n_clicks'),
    [State('date-picker-range', 'start_date'), State('date-picker-range', 'end_date'),
     State('intervalo-dias-slider', 'value'), State('cultura-dropdown', 'value'),
     State('duracao-ciclo-slider', 'value'), State('num-simulacoes-input', 'value'),
     State('yp-soja-input', 'value'), State('custo-soja-input', 'value'), State('preco-soja-input', 'value'),
     State('yp-milho-input', 'value'), State('custo-milho-input', 'value'), State('preco-milho-input', 'value'),
     State('t-base-input', 'value'), State('gdu-inicio-soja-input', 'value'), State('gdu-pico-soja-input', 'value'),
     State('gdu-inicio-milho-input', 'value'), State('gdu-pico-milho-input', 'value'),
     State('ky-soja-input', 'value'), State('ky-milho-input', 'value')]
)
def run_main_analysis(n_clicks, start_date, end_date, intervalo_dias, cultura, duracao_ciclo, num_simulacoes,
                      yp_soja, custo_soja, preco_soja, yp_milho, custo_milho, preco_milho,
                      t_base, gdu_inicio_soja, gdu_pico_soja, gdu_inicio_milho, gdu_pico_milho,
                      ky_soja, ky_milho):

    if n_clicks is None:
        return no_update, False, "", no_update, no_update

    # Valida√ß√£o robusta de todos os inputs num√©ricos
    required_params_dict = {
        "Soja": [yp_soja, custo_soja, preco_soja, t_base, gdu_inicio_soja, gdu_pico_soja, ky_soja, num_simulacoes],
        "Milho": [yp_milho, custo_milho, preco_milho, t_base, gdu_inicio_milho, gdu_pico_milho, ky_milho, num_simulacoes]
    }

    if any(param is None for param in required_params_dict[cultura]):
        error_message = "Erro de Valida√ß√£o: Por favor, preencha todos os campos num√©ricos, incluindo o 'N√∫mero de Simula√ß√µes', antes de executar a an√°lise."
        return no_update, True, error_message, no_update, no_update

    if cultura == "Soja":
        params_cultura = {
            'yp': yp_soja, 'ky': ky_soja, 'custo_producao': custo_soja,
            'preco_venda': preco_soja, 'gdu_inicio_reprodutivo': gdu_inicio_soja,
            'gdu_enchimento_graos': gdu_pico_soja
        }
    else:
        params_cultura = {
            'yp': yp_milho, 'ky': ky_milho, 'custo_producao': custo_milho,
            'preco_venda': preco_milho, 'gdu_inicio_reprodutivo': gdu_inicio_milho,
            'gdu_enchimento_graos': gdu_pico_milho
        }

    datas_de_plantio = pd.to_datetime(pd.date_range(start=start_date, end=end_date, freq=f'{intervalo_dias}D'))

    try:
        # Chama a fun√ß√£o de an√°lise probabil√≠stica
        df_resultados = simulation_engine.executar_analise_probabilistica(
            datas_de_plantio, duracao_ciclo, params_cultura, t_base, int(num_simulacoes)
        )
    except Exception as e:
        return no_update, True, f"Erro na simula√ß√£o: {e}", no_update, no_update

    if df_resultados.empty:
        return dbc.Alert("A simula√ß√£o n√£o retornou resultados. Verifique os par√¢metros de entrada.", color="warning"), False, "", no_update, no_update

    # C√°lculos de resultados
    estresse_reprodutivo = df_resultados['estresse_florescimento'] + df_resultados['estresse_ench_graos']
    fator_reducao = params_cultura['ky'] * (estresse_reprodutivo / duracao_ciclo)
    df_resultados['produtividade_sc_ha'] = params_cultura['yp'] * (1 - np.minimum(fator_reducao, 1.0))
    df_resultados['margem_bruta_ha'] = (df_resultados['produtividade_sc_ha'] * params_cultura['preco_venda']) - params_cultura['custo_producao']
    df_resultados['data_plantio_str'] = df_resultados['data_plantio'].dt.strftime('%d/%m/%Y')

    # Gera√ß√£o dos gr√°ficos e KPIs
    unique_dates = sorted(df_resultados['data_plantio_str'].unique())
    color_map = {date: color for date, color in zip(unique_dates, px.colors.qualitative.Plotly)}
    df_summary = df_resultados.groupby('data_plantio_str').agg(
        margem_media=('margem_bruta_ha', 'mean'),
        produtividade_media=('produtividade_sc_ha', 'mean'),
        prob_prejuizo=('margem_bruta_ha', lambda x: (x < 0).mean() * 100),
        estresse_medio=('dias_estresse_total', 'mean')
    ).reset_index()

    best_window = df_summary.loc[df_summary['margem_media'].idxmax()]
    kpi_cards = dbc.Row([
        dbc.Col(dbc.Card([dbc.CardBody([html.H6("Melhor Data de Plantio", className="card-title text-muted"), html.H4(best_window['data_plantio_str'], className="card-text")])]), md=3),
        dbc.Col(dbc.Card([dbc.CardBody([html.H6("Margem M√©dia Esperada", className="card-title text-muted"), html.H4(f"R$ {best_window['margem_media']:.2f}", className="card-text text-success")])]), md=3),
        dbc.Col(dbc.Card([dbc.CardBody([html.H6("Produtividade M√©dia", className="card-title text-muted"), html.H4(f"{best_window['produtividade_media']:.1f} sc/ha", className="card-text")])]), md=3),
        dbc.Col(dbc.Card([dbc.CardBody([html.H6("Prob. de Preju√≠zo", className="card-title text-muted"), html.H4(f"{best_window['prob_prejuizo']:.1f}%", className="card-text text-danger")])]), md=3),
    ], className="mb-4")

    fig_prod = px.box(df_resultados, x="data_plantio_str", y="produtividade_sc_ha", title="Distribui√ß√£o da Produtividade", color="data_plantio_str", color_discrete_map=color_map, labels={"data_plantio_str": "Data de Plantio", "produtividade_sc_ha": "Produtividade (sc/ha)"})
    fig_margem = px.box(df_resultados, x="data_plantio_str", y="margem_bruta_ha", title="Distribui√ß√£o da Margem Bruta", color="data_plantio_str", color_discrete_map=color_map, labels={"data_plantio_str": "Data de Plantio", "margem_bruta_ha": "Margem Bruta (R$/ha)"})

    fig_prod.update_layout(xaxis_rangeslider_visible=True)
    fig_margem.update_layout(xaxis_rangeslider_visible=True)

    df_agro_summary = df_resultados.groupby(['data_plantio', 'data_plantio_str']).agg(gdu_media=('gdu_final', 'mean'), estresse_medio=('dias_estresse_total', 'mean')).reset_index().sort_values(by='data_plantio')
    fig_combo = go.Figure(data=[go.Bar(name='GDU Final (M√©dia)', x=df_agro_summary['data_plantio_str'], y=df_agro_summary['gdu_media'], marker_color='cornflowerblue'), go.Scatter(name='Dias de Estresse (M√©dia)', x=df_agro_summary['data_plantio_str'], y=df_agro_summary['estresse_medio'], yaxis='y2', mode='lines+markers', marker_color='tomato')])

    fig_combo.update_layout(
        title_text="GDU vs. Estresse por Janela",
        yaxis=dict(title=dict(text="GDU (M√©dia)")),
        yaxis2=dict(title=dict(text="Dias de Estresse (M√©dia)"), overlaying='y', side='right'),
        legend=dict(x=0.01, y=0.99),
        xaxis_rangeslider_visible=True
    )

    df_estresse_summary = df_resultados.groupby(['data_plantio', 'data_plantio_str']).agg(Vegetativo=('estresse_vegetativo', 'mean'), Florescimento=('estresse_florescimento', 'mean'), Enchimento_de_Gr√£os=('estresse_ench_graos', 'mean')).reset_index().sort_values(by='data_plantio')
    fig_stacked_bar = px.bar(df_estresse_summary, x='data_plantio_str', y=['Vegetativo', 'Florescimento', 'Enchimento_de_Gr√£os'], title="Composi√ß√£o do Estresse por Est√°dio (M√©dia de Dias)", labels={"data_plantio_str": "Data de Plantio", "value": "M√©dia de Dias de Estresse", "variable": "Est√°dio Fenol√≥gico"})

    fig_stacked_bar.update_layout(xaxis_rangeslider_visible=True)

    df_risk_summary = df_summary.sort_values(by='data_plantio_str', key=lambda col: pd.to_datetime(col, format='%d/%m/%Y'))

    fig_tradeoff = px.scatter(df_risk_summary, x='prob_prejuizo', y='margem_media', text='data_plantio_str', title='Retorno M√©dio vs. Risco de Preju√≠zo', color='data_plantio_str', color_discrete_map=color_map, labels={"prob_prejuizo": "Probabilidade de Preju√≠zo (%)", "margem_media": "Margem Bruta M√©dia (R$/ha)"})
    fig_tradeoff.update_traces(textposition='top center')

    output_content = html.Div([
        html.H3("Resumo Executivo (Melhor Janela)"), kpi_cards, html.Hr(), html.H3("An√°lises Detalhadas"),
        dbc.Tabs([
            dbc.Tab(dbc.Row([dbc.Col(dcc.Graph(figure=fig_prod), md=6), dbc.Col(dcc.Graph(figure=fig_margem), md=6)]), label="Produtividade e Rentabilidade"),
            dbc.Tab(dcc.Graph(figure=fig_combo), label="An√°lise Agron√¥mica"),
            dbc.Tab(dcc.Graph(figure=fig_stacked_bar), label="An√°lise Fenol√≥gica"),
            dbc.Tab(dcc.Graph(figure=fig_tradeoff), label="Risco vs. Retorno")
        ])
    ])
    params_for_store = {'params_base': {**params_cultura, 'Dura√ß√£o do Ciclo (dias)': duracao_ciclo}, 'cultura': cultura}
    return output_content, False, "", df_resultados.to_json(date_format='iso', orient='split'), params_for_store